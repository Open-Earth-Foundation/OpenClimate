version: '3.9'
services:

#***************************************************************
# Hub Services
#***************************************************************

  # Nginx Service
  hub-webserver:
    image: nginx:alpine
    build:
      context: nginx
      dockerfile: Dockerfile-nginx    
    hostname: hub-webserver
    restart: unless-stopped
    tty: true
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./OpenClimate-hub-ui/build:/var/www/ui:consistent
      - ./nginx/hub-ssl:/etc/nginx/ssl:consistent
      - ./OpenClimate-hub-controller:/var/www/api:consistent
      - ./nginx/hub-conf.d/:/etc/nginx/conf.d/
      - ./nginx/docker-entrypoint.d/create-self-signed.sh:/docker-entrypoint.d/10-create-self-signed.sh
    depends_on:
      - "hub-api"
      - "hub-ui"
    networks:
      - oc-network

  # Hub PostgreSQL Service
  hub-db:
    image: postgres:9.5
    hostname: hub-db
    restart: always
    # ports: # Uncomment to access postgres outside of containers
    #   - "5432:5432"
    environment:
      POSTGRES_USER: development
      POSTGRES_PASSWORD: development
    networks:
      - oc-network

  hub-api:
    image: node:12-alpine 
    hostname: hub-api
    restart: unless-stopped
    user: root # we want to run with write permissions for dev, so run as root.
    working_dir: /home/node/app
    environment: 
      - NODE_ENV=development
      - CONTROLLERPORT=3100
      - AGENTADDRESS=http://agent-hub:8150
      - WEB_ROOT=https://localhost
      - JWT_SECRET=ZBVgToVv72zffZE2ksUYNAhYmNCXwgKp
      - SESSION_SECRET=aZj6iXNkrtmLrAT0HsTrp7dRR7r4U7P0
      - SCHEMA_CLIMATE_ORGANIZATION=XSYhjGtcha6oCAzaVg34df:2:Climate_Organization:1.1
    volumes:
      - ./OpenClimate-hub-controller:/home/node/app:consistent
      - ./wait-for-it:/home/node/wait-for-it
    expose:
      - "3100"
    command: >
       sh -c "apk add --update python3 cmake bash && rm -rf /var/cache/apk/* && npm install -g nodemon ts-node && npm install && /home/node/wait-for-it/wait-for-it.sh hub-db:5432 && npm run migrate_up_all && npm run dev"
    networks:
      - oc-network
    depends_on:
      - "hub-db"
      # - "hub-mongo"

  hub-ui:
    image: node:12-stretch
    hostname: hub-ui
    restart: unless-stopped
    user: root # To write to ui folder, we need write permissions. node user does not have this.
    tty: true # keep react from stopping development server
    working_dir: /home/node/app
    environment: 
      - NODE_ENV=development
      - BROWSER=none  # don't open the web browser
    volumes:
      - ./OpenClimate-hub-ui:/home/node/app:rw
    expose:
      - "3000"
    command: >
      sh -c "npm install && npm start"
    networks:
      - oc-network
    depends_on:
      - "hub-db"

  tunnel-hub:
    image: reflectivedevelopment/agent-tunnel
    command: "agent-hub:3005 -p 4040 --host ${AGENT_TUNNEL_HOST}"
    networks:
      - oc-network     
  agent-hub:
    build: aries-acapy-plugin-toolbox
    environment:
      TUNNEL_HOST: tunnel-hub
      AGENT_NAME: Hub
      PORT: 3005
      ADMIN_PORT: 8150
      WEBHOOK_ADDRESS: http://hub-api:3100/api/controller-webhook
      ACAPY_ENDPOINT: http://agent-hub:3005
      # ACAPY_ENDPOINT_WS: ws://2aa2-92-124-161-161.ngrok.io
    volumes:
      - ./aries-acapy-plugin-toolbox-startup:/home/indy/aries-acapy-plugin-toolbox-startup:consistent
    command: >
      sh -c "/home/indy/aries-acapy-plugin-toolbox-startup/startup.sh"
    ports:
     - "3005:3005"
     - "8150:8150"
    networks:
      - oc-network
    depends_on:
      - "hub-api"


#***************************************************************
# Dev Services
#***************************************************************

  # tunnel-test:
  #   image: reflectivedevelopment/agent-tunnel
  #   command: "agent-test:3009 -p 4040 --host ${AGENT_TUNNEL_HOST}"
  #   networks:
  #     - oc-network
  # agent-test:
  #   build: aries-acapy-plugin-toolbox
  #   environment:
  #     TUNNEL_HOST: tunnel-test
  #     AGENT_NAME: Test
  #     PORT: 3009
  #     ADMIN_PORT: 8154
  #   volumes:
  #     - ./aries-acapy-plugin-toolbox-startup:/home/indy/aries-acapy-plugin-toolbox-startup:consistent
  #   command: >
  #     sh -c "./wait.sh /home/indy/aries-acapy-plugin-toolbox-startup/startup.sh"
  #   ports:
  #    - "3009:3009"
  #    - "8154:8154"
  #   networks:
  #     - oc-network

#***************************************************************
# Traction Services
#***************************************************************

  traction-api:
    build:
      context: ./traction/services/traction
      dockerfile: Dockerfile
    depends_on:
      endorser-agent:
        condition: service_started
      traction-agent:
        condition: service_started
      traction-db:
        condition: service_healthy
    entrypoint: bash -c "alembic upgrade head && uvicorn api.main:app --reload --host 0.0.0.0 --port 5000 --log-level info"
    environment:
      - POSTGRESQL_HOST=${POSTGRESQL_HOST}
      - POSTGRESQL_PORT=${POSTGRESQL_PORT}
      - POSTGRESQL_DB=${TRACTION_PSQL_DB}
      - TRACTION_DB_ADMIN=${TRACTION_PSQL_ADMIN}
      - TRACTION_DB_ADMIN_PWD=${TRACTION_PSQL_ADMIN_PWD}
      - TRACTION_DB_USER=${TRACTION_PSQL_USER}
      - TRACTION_DB_USER_PWD=${TRACTION_PSQL_USER_PWD}
      - TRACTION_API_ADMIN_USER=${TRACTION_API_ADMIN_USER}
      - TRACTION_API_ADMIN_KEY=${TRACTION_API_ADMIN_KEY}
      - ACAPY_ADMIN_URL=${ACAPY_ADMIN_URL}
      - ACAPY_ADMIN_URL_API_KEY=${ACAPY_ADMIN_URL_API_KEY}
      - ENVIRONMENT=production
      - WEB_CONCURRENCY=${WEB_CONCURRENCY}
      - TRACTION_HOST_URL=${TRACTION_HOST_URL}
      - TRACTION_WEBHOOK_URL=${TRACTION_WEBHOOK_URL}
      - TRACTION_TENANT_WEBHOOK_URL=${TRACTION_TENANT_WEBHOOK_URL}
      - ACAPY_WEBHOOK_URL_API_KEY=${ACAPY_WEBHOOK_URL_API_KEY}
      - ACAPY_ENDORSER_PUBLIC_DID=${ACAPY_ENDORSER_PUBLIC_DID}
      - ENDORSER_CONNECTION_ALIAS=${ENDORSER_CONNECTION_ALIAS}
      - ACAPY_GENESIS_URL=${ACAPY_GENESIS_URL}
      - DEFAULT_RETRY_ATTEMPTS=${DEFAULT_RETRY_ATTEMPTS:-10}
      - DEFAULT_PAUSE_BETWEEN_ATTEMPTS=${DEFAULT_PAUSE_BETWEEN_ATTEMPTS:-2}
    ports:
      - ${TRACTION_SERVICE_PORT}:5000
    extra_hosts:
      - host.docker.internal:host-gateway
    volumes:
      - ./traction/services/traction:/app:rw
    networks:
      - oc-network

  traction-agent:
    image: bcgovimages/aries-cloudagent:py36-1.16-1_0.7.3
    depends_on:
      endorser-agent:
        condition: service_started
      traction-db:
        condition: service_healthy
    ports:
      - ${ACAPY_ADMIN_PORT}:${ACAPY_ADMIN_PORT}
      - ${ACAPY_HTTP_PORT}:${ACAPY_HTTP_PORT}
    entrypoint: /bin/bash
    command: [
        "-c",
        "sleep 5;
        aca-py start \
        --auto-provision
        --arg-file acapy-static-args.yml \
        --inbound-transport http '0.0.0.0' ${ACAPY_HTTP_PORT} \
        --webhook-url '${TRACTION_WEBHOOK_URL}' \
        --genesis-url '${ACAPY_GENESIS_URL}' \
        --endpoint ${ACAPY_ENDPOINT} \
        --wallet-name '${ACAPY_WALLET_DATABASE}' \
        --wallet-key '${ACAPY_WALLET_ENCRYPTION_KEY}' \
        --wallet-storage-type '${ACAPY_WALLET_TYPE}' \
        --wallet-storage-config '{\"url\":\"${POSTGRESQL_HOST}:5432\",\"max_connections\":5}' \
        --wallet-storage-creds '{\"account\":\"${POSTGRESQL_USER}\",\"password\":\"${POSTGRESQL_PASSWORD}\",\"admin_account\":\"${POSTGRESQL_USER}\",\"admin_password\":\"${POSTGRESQL_PASSWORD}\"}' \
        --wallet-name traction-wallet  \
        --admin '0.0.0.0' ${ACAPY_ADMIN_PORT} \
        --emit-new-didcomm-prefix \
        --label '${AGENT_NAME}' \
        --jwt-secret '${JWT_SECRET}' \
        ${ACAPY_ADMIN_CONFIG} \
        ${ACAPY_READ_ONLY_MODE} \
        ${ACAPY_TAILS_BASE_URL} \
        ${ACAPY_TAILS_UPLOAD_URL} \
        --endorser-protocol-role author \
        --endorser-public-did ${ACAPY_ENDORSER_PUBLIC_DID} \
        --endorser-alias ${ENDORSER_CONNECTION_ALIAS} \
        --auto-request-endorsement \
        --auto-write-transactions \
        --auto-create-revocation-transactions \
        ",
      ]
    volumes:
      - "./traction/scripts/acapy-static-args.yml:/home/indy/acapy-static-args.yml"
    extra_hosts:
      - host.docker.internal:host-gateway
    networks:
      - oc-network

  traction-db:
    image: "postgres:12"
    environment:
      - POSTGRES_PASSWORD=${POSTGRESQL_PASSWORD}
    ports:
      - ${POSTGRESQL_PORT}:5432
    volumes:
      - traction-wallet:/var/lib/postgresql/data
      - ./traction/scripts/db_init.sql:/docker-entrypoint-initdb.d/1-init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - oc-network

  endorser-api:
    build:
      context: ./traction/services/endorser
      dockerfile: Dockerfile
    depends_on:
      endorser-agent:
        condition: service_started
      endorser-db:
        condition: service_healthy
    environment:
      - POSTGRESQL_HOST=${ENDORSER_POSTGRESQL_HOST}
      - POSTGRESQL_PORT=${ENDORSER_POSTGRESQL_PORT}
      - POSTGRESQL_DB=${ENDORSER_PSQL_DB}
      - ENDORSER_DB_ADMIN=${ENDORSER_PSQL_ADMIN}
      - ENDORSER_DB_ADMIN_PWD=${ENDORSER_PSQL_ADMIN_PWD}
      - ENDORSER_DB_USER=${ENDORSER_PSQL_USER}
      - ENDORSER_DB_USER_PWD=${ENDORSER_PSQL_USER_PWD}
      - ENDORSER_API_ADMIN_USER=${ENDORSER_API_ADMIN_USER}
      - ENDORSER_API_ADMIN_KEY=${ENDORSER_API_ADMIN_KEY}
      - ACAPY_ADMIN_URL=${ENDORSER_ACAPY_ADMIN_URL}
      - ACAPY_ADMIN_URL_API_KEY=${ENDORSER_ACAPY_ADMIN_URL_API_KEY}
      - ENVIRONMENT=production
      - WEB_CONCURRENCY=${WEB_CONCURRENCY}
      - TRACTION_WEBHOOK_URL=${ENDORSER_WEBHOOK_URL}
      - ACAPY_WEBHOOK_URL_API_KEY=${ENDORSER_ACAPY_WEBHOOK_URL_API_KEY}
    ports:
      - ${ENDORSER_SERVICE_PORT}:5000
    extra_hosts:
      - host.docker.internal:host-gateway
    volumes:
      - ./traction/services/endorser:/app:rw
    networks:
      - oc-network

  endorser-agent:
    image: bcgovimages/aries-cloudagent:py36-1.16-1_0.7.3
    depends_on:
      endorser-db:
        condition: service_healthy
    ports:
      - ${ACAPY_ENDORSER_ADMIN_PORT}:${ACAPY_ENDORSER_ADMIN_PORT}
      - ${ACAPY_ENDORSER_HTTP_PORT}:${ACAPY_ENDORSER_HTTP_PORT}
    entrypoint: /bin/bash
    command: [
        "-c",
        "sleep 5;
        aca-py start \
        --auto-provision
        --arg-file endorser-acapy-args.yml \
        --inbound-transport http '0.0.0.0' ${ACAPY_ENDORSER_HTTP_PORT} \
        --webhook-url '${ENDORSER_WEBHOOK_URL}' \
        --genesis-url '${ACAPY_GENESIS_URL}' \
        --endpoint ${ACAPY_ENDORSER_ENDPOINT} \
        --wallet-name '${ACAPY_WALLET_DATABASE}' \
        --wallet-key '${ACAPY_WALLET_ENCRYPTION_KEY}' \
        --wallet-storage-type '${ACAPY_WALLET_TYPE}' \
        --wallet-storage-config '{\"url\":\"${ENDORSER_POSTGRESQL_HOST}:5432\",\"max_connections\":5}' \
        --wallet-storage-creds '{\"account\":\"${ENDORSER_POSTGRESQL_USER}\",\"password\":\"${ENDORSER_POSTGRESQL_PASSWORD}\",\"admin_account\":\"${ENDORSER_POSTGRESQL_USER}\",\"admin_password\":\"${ENDORSER_POSTGRESQL_PASSWORD}\"}' \
        --wallet-name endorser-wallet  \
        --seed '${ACAPY_ENDORSER_SEED}' \
        --admin '0.0.0.0' ${ACAPY_ENDORSER_ADMIN_PORT} \
        --label '${ENDORSER_AGENT_NAME}' \
        ${ACAPY_ADMIN_CONFIG} \
        ${ACAPY_READ_ONLY_MODE} \
        --endorser-protocol-role endorser \
        --auto-endorse-transactions \
        ",
      ]
    volumes:
      - "./traction/scripts/endorser-acapy-args.yml:/home/indy/endorser-acapy-args.yml"
    extra_hosts:
      - host.docker.internal:host-gateway
    networks:
      - oc-network

  endorser-db:
    image: "postgres:12"
    environment:
      - POSTGRES_PASSWORD=${ENDORSER_POSTGRESQL_PASSWORD}
    ports:
      - ${ENDORSER_POSTGRESQL_PORT}:5432
    volumes:
      - endorser-wallet:/var/lib/postgresql/data
      - ./traction/scripts/db_init.sql:/docker-entrypoint-initdb.d/1-init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - oc-network

#***************************************************************
# Traction Showcase Demo
#***************************************************************
  traction-showcase:
    build:
      context: ./traction/services/showcase
      dockerfile: Dockerfile
    depends_on:
      showcase-db:
        condition: service_healthy
    entrypoint: bash -c "alembic upgrade head && uvicorn api.main:app --reload --host 0.0.0.0 --port 5000 --log-level info"
    environment:
      - POSTGRESQL_HOST=showcase-db
      - POSTGRESQL_PORT=5432
      - POSTGRESQL_DB=${SHOWCASE_PSQL_DB}
      - SHOWCASE_DB_ADMIN=${SHOWCASE_PSQL_ADMIN}
      - SHOWCASE_DB_ADMIN_PWD=${SHOWCASE_PSQL_ADMIN_PWD}
      - SHOWCASE_DB_USER=${SHOWCASE_PSQL_USER}
      - SHOWCASE_DB_USER_PWD=${SHOWCASE_PSQL_USER_PWD}
      - SHOWCASE_ENDPOINT=${SHOWCASE_ENDPOINT}
      - SHOWCASE_STATIC_FILES=${SHOWCASE_STATIC_FILES}
      - SHOWCASE_CORS_URLS=${SHOWCASE_CORS_URLS}
      - TRACTION_ENDPOINT=${TRACTION_ENDPOINT}
      - TRACTION_API_ADMIN_USER=${TRACTION_API_ADMIN_USER}
      - TRACTION_API_ADMIN_KEY=${TRACTION_API_ADMIN_KEY}
      - ENVIRONMENT=production
      - WEB_CONCURRENCY=${WEB_CONCURRENCY}
    ports:
      - ${SHOWCASE_SERVICE_PORT}:5000
    extra_hosts:
      - host.docker.internal:host-gateway
    volumes:
      - ./traction/services/showcase:/traction/app:rw
    networks:
      - oc-network

  showcase-db:
    image: "postgres:12"
    environment:
      - POSTGRES_PASSWORD=${SHOWCASE_POSTGRESQL_PASSWORD}
    ports:
      - ${SHOWCASE_POSTGRESQL_PORT}:5432
    volumes:
      - traction-showcase:/var/lib/postgresql/data
      - ./traction/scripts/db_init.showcase.sql:/docker-entrypoint-initdb.d/1-init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - oc-network
volumes:
  traction-wallet:
  endorser-wallet:
  traction-showcase:

# Docker Networks
networks:
  oc-network:
    driver: bridge

